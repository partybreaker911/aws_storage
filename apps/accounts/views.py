from django.contrib import messages
from django.views.generic import View
from django.shortcuts import render, redirect
from django.http import HttpResponse, HttpRequest
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.mixins import LoginRequiredMixin

from apps.accounts.models import Profile, RSAKeyPair, UserGeoData
from apps.accounts.forms import ProfileForm


class ProfileView(LoginRequiredMixin, View):
    template_name = "accounts/profile.html"

    def get(self, request: HttpRequest) -> HttpResponse:
        """
        Retrieves user profile, creates a ProfileForm instance, and renders the template with the form.

        Args:
            request (HttpRequest): The request object used to generate the response.

        Returns:
            HttpResponse: The HTTP response generated by the view.
        """
        # Retrieve user profile
        user_profile = Profile.objects.get(user=request.user)
        # Create ProfileForm instance
        user_profile_form = ProfileForm(instance=user_profile)
        context = {
            "user_profile_form": user_profile_form,
        }
        # Render the template with the form
        return render(request, self.template_name, context)

    def post(self, request: HttpRequest) -> HttpResponse:
        """
        Handles POST requests for the Profile view.

        Args:
            request (HttpRequest): The HTTP request object.

        Returns:
            HttpResponse: The HTTP response generated by the view
        """
        user_profile = Profile.objects.get(user=request.user.id)
        user_profile_form = ProfileForm(request.POST, instance=user_profile)
        if user_profile_form.is_valid():
            user_profile_form.save()
            messages.success(request, _("Your user profile has been updated."))
            return redirect("dashboard:dashboard")
        else:
            messages.error(request, _("There was an error updating your profile"))
            return render(
                request,
                self.template_name,
                {
                    "user_profile_form": user_profile_form,
                },
            )


class RSKeyPairView(LoginRequiredMixin, View):
    template_name = "accounts/rsa_key_pair.html"

    def get(self, request: HttpRequest) -> HttpResponse:
        """
        Handles GET requests for the RSAKeyPair view.

        Args:
            request (HttpRequest): The HTTP request object.

        Returns:
            HttpResponse: The rendered template response.
        """
        try:
            # Get the RSA key pair associated with the user.
            keys_pair = RSAKeyPair.objects.get(user=request.user)
            context = {
                "keys_pair": keys_pair,
            }
            # Render the template with the key pair.
            return render(request, self.template_name, context)
        except RSAKeyPair.DoesNotExist:
            # If the key pair does not exist, show an error message.
            messages.error(request, _("You do not have a keys pair"))
            # Render the template without the key pair.
            return render(request, self.template_name)


class RSKeyPairSSHKeyRefreshView(LoginRequiredMixin, View):
    template_name = "key_refresh.html"

    def post(self, request: HttpRequest) -> HttpResponse:
        return render(request, self.template_name)


class UserGeoDataView(LoginRequiredMixin, View):
    template_name = "accounts/geo_data.html"

    def get(self, request: HttpRequest) -> HttpResponse:
        """
        Renders the user's geographical data if available, or the default template if not.

        Args:
            request: The HTTP request object.

        Returns:
            An HTTP response object.
        """
        try:
            user_geo_data = UserGeoData.objects.get(user=request.user)
            context = {
                "user_geo_data": user_geo_data,
            }
            return render(request, self.template_name, context)
        except UserGeoData.DoesNotExist:
            return render(request, self.template_name)
